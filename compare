#!/usr/bin/env bash

USAGE="\
usage:
compare TARGET.json  CURRENT.json
compare TARGET.json [CURRENT.json=./read]

"
# compare A.json B.json [.spaces|.displays|.windows]

[ -z "$1" ] && {
	printf "$USAGE"
	exit 1
}

log() {
	echo "$1"
}

OUTDIR="$(mktemp -d)"
log "$OUTDIR"

if [ -n "$2" ]; then
	TARGET="$1"
	CURRENT="$2"
	shift
	shift
else
	TARGET="$1"
	shift

	CURRENT="${OUTDIR}/CURRENT.json"
	./read > "$CURRENT"
fi

TARGET="$(realpath "$TARGET")"
CURRENT="$(realpath "$CURRENT")"

# TODO: do for windows too.
# currently sorting does not work since don't have UUID; maybe should use pid instead?
# SELECTORS=(".displays" ".spaces" ".windows")
SELECTORS=(".displays" ".spaces")
# SELECTORS=(".displays")
# SELECTORS=(".spaces")
# SELECTORS=(".windows")

perform_compare_for_selector() {
	local SELECTOR="$1"
	log "$SELECTOR:"

	TARGETbase="$(basename "$TARGET")"
	CURRENTbase="$(basename "$CURRENT")"
	TARGET_SELECTOR="${OUTDIR}/${TARGETbase}${SELECTOR}.json"
	CURRENT_SELECTOR="${OUTDIR}/${CURRENTbase}${SELECTOR}.json"

	# cat "$TARGET" | jq --sort-keys ".$SELECTOR" > "$TARGET_SELECTOR"
	# cat "$CURRENT" | jq --sort-keys ".$SELECTOR" > "$CURRENT_SELECTOR"

	# compare by index
	#cat "$TARGET" | jq ".$SELECTOR | . |= sort_by(.index)" > "$TARGET_SELECTOR"
	#cat "$CURRENT" | jq ".$SELECTOR | . |= sort_by(.index)" > "$CURRENT_SELECTOR"

	# compare by uuid, so that the diff won't be impacted if the items were moved around.
	# cat "$TARGET" | jq "$SELECTOR | . |= sort_by(.uuid)" > "$TARGET_SELECTOR"
	# cat "$CURRENT" | jq "$SELECTOR | . |= sort_by(.uuid)" > "$CURRENT_SELECTOR"
	cat "$TARGET" | jq "$SELECTOR | sort_by(.uuid)" > "$TARGET_SELECTOR"
	cat "$CURRENT" | jq "$SELECTOR | sort_by(.uuid)" > "$CURRENT_SELECTOR"

	/usr/bin/env json-diff -f "$CURRENT_SELECTOR" "$TARGET_SELECTOR" -C
}

for selector in "${SELECTORS[@]}"; do
	perform_compare_for_selector "$selector"
done
