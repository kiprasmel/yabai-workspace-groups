#!/usr/bin/env bash

USAGE="\
usage:
compare CURRENT.json TARGET.json
compare TARGET.json [CURRENT.json=./read]

"
# compare A.json B.json [.spaces|.displays|.windows]

[ -z "$1" ] && {
	printf "$USAGE"
	exit 1
}

log() {
	echo "$1"
}

OUTDIR="$(mktemp -d)"
log "$OUTDIR"

if [ -n "$2" ]; then
	F1="$1"
	F2="$2"
	shift
	shift
else
	F1="$1"
	shift

	F2="${OUTDIR}/CURRENT.json"
	./read > "$F2"
fi

F1="$(realpath "$F1")"
F2="$(realpath "$F2")"

# TODO: do for windows too.
# currently sorting does not work since don't have UUID; maybe should use pid instead?
# SELECTORS=(".displays" ".spaces" ".windows")
SELECTORS=(".displays" ".spaces")
# SELECTORS=(".displays")
# SELECTORS=(".spaces")
# SELECTORS=(".windows")

perform_compare_for_selector() {
	local SELECTOR="$1"
	log "$SELECTOR:"

	F1base="$(basename "$F1")"
	F2base="$(basename "$F2")"
	FSP1="${OUTDIR}/${F1base}${SELECTOR}.json"
	FSP2="${OUTDIR}/${F2base}${SELECTOR}.json"

	# cat "$F1" | jq --sort-keys ".$SELECTOR" > "$FSP1"
	# cat "$F2" | jq --sort-keys ".$SELECTOR" > "$FSP2"

	# compare by index
	#cat "$F1" | jq ".$SELECTOR | . |= sort_by(.index)" > "$FSP1"
	#cat "$F2" | jq ".$SELECTOR | . |= sort_by(.index)" > "$FSP2"

	# compare by uuid, so that the diff won't be impacted if the items were moved around.
	# cat "$F1" | jq "$SELECTOR | . |= sort_by(.uuid)" > "$FSP1"
	# cat "$F2" | jq "$SELECTOR | . |= sort_by(.uuid)" > "$FSP2"
	cat "$F1" | jq "$SELECTOR | sort_by(.uuid)" > "$FSP1"
	cat "$F2" | jq "$SELECTOR | sort_by(.uuid)" > "$FSP2"

	# /usr/bin/env diff -u "$FSP1" "$FSP2" | diff-so-fancy
	# /usr/bin/env jd "$FSP1" "$FSP2"

	/usr/bin/env json-diff -f "$FSP1" "$FSP2" -C
}

for selector in "${SELECTORS[@]}"; do
	perform_compare_for_selector "$selector"
done
